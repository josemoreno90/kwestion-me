'use strict';

exports.__esModule = true;
exports.unWatch = exports.destroy = exports.valueChanged = undefined;
exports.watchPath = watchPath;
exports.unwatchPath = unwatchPath;
exports.destroyPath = destroyPath;
exports.unwatchAllPaths = unwatchAllPaths;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

var _selectors = require('./selectors');

var selectors = _interopRequireWildcard(_selectors);

var _selectors2 = require('../initialization/selectors');

var initSelectors = _interopRequireWildcard(_selectors2);

var _actions = require('../errors/actions');

var _actions2 = require('../loadings/actions');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var valueChanged = exports.valueChanged = function valueChanged(value, location, path) {
  return {
    type: types.VALUE_CHANGED,
    payload: value,
    path: path,
    location: location,
    locationValue: true
  };
};

var destroy = exports.destroy = function destroy(location) {
  return {
    type: types.DESTROY,
    location: location
  };
};

var unWatch = exports.unWatch = function unWatch(path) {
  return {
    type: types.UNWATCH,
    path: path
  };
};

function watchPath(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var logLoad = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var location = reduxPath || firebasePath;

  return function (dispatch, getState) {
    var isInitialized = initSelectors.isInitialised(getState(), location);

    if (!isInitialized) {
      var ref = firebaseApp.database().ref(firebasePath);
      var path = ref.toString();

      if (logLoad) {
        dispatch((0, _actions2.logLoading)(location));
      }

      ref.on('value', function (snapshot) {
        dispatch(valueChanged(snapshot.val(), location, path));
      }, function (err) {
        dispatch((0, _actions.logError)(location, err));
      });
    }
  };
}

function unwatchPath(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch) {
    var location = reduxPath || path;
    firebaseApp.database().ref(path).off();
    dispatch(unWatch(location));
  };
}

function destroyPath(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var location = reduxPath || path;

  return function (dispatch) {
    firebaseApp.database().ref(path).off();
    dispatch(unWatch(location));
    dispatch(destroy(location));
  };
}

function unwatchAllPaths(firebaseApp) {
  return function (dispatch, getState) {
    var allPaths = selectors.getAllPaths(getState());

    Object.keys(allPaths).forEach(function (key, index) {
      firebaseApp.database().ref(allPaths[index]).off();
      dispatch(unWatch(key));
    });
  };
}