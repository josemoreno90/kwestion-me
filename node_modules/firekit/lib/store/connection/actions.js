'use strict';

exports.__esModule = true;
exports.onConnectionStateChange = onConnectionStateChange;
exports.initConnection = initConnection;
exports.unsubscribeConnection = unsubscribeConnection;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

var _actions = require('../errors/actions');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function onConnectionStateChange(isConnected) {
  return {
    type: types.ON_CONNECTION_STATE_CHANGED,
    payload: { isConnected: isConnected }
  };
}

function initConnection(firebaseApp, onChange) {
  return function (dispatch) {
    firebaseApp.database().ref('.info/connected').on('value', function (snapshot) {
      dispatch(onConnectionStateChange(snapshot.val()));

      if (onChange !== undefined && onChange instanceof Function) {
        onChange(snapshot.val());
      }
    }, function (err) {
      console.error(err);
      dispatch((0, _actions.logError)('.info/connected', err));
    });
  };
}

function unsubscribeConnection(firebaseApp) {
  return function (dispatch) {
    firebaseApp.database().ref('.info/connected').off();
    dispatch(onConnectionStateChange(false));
  };
}