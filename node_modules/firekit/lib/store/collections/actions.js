'use strict';

exports.__esModule = true;
exports.getLocation = exports.getRef = exports.unWatch = exports.destroy = exports.childRemoved = exports.childChanged = exports.childAdded = exports.initialize = undefined;
exports.watchCol = watchCol;
exports.unwatchCol = unwatchCol;
exports.destroyCol = destroyCol;
exports.unwatchAllCol = unwatchAllCol;
exports.unwatchAllCols = unwatchAllCols;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

var _selectors = require('./selectors');

var selectors = _interopRequireWildcard(_selectors);

var _selectors2 = require('../initialization/selectors');

var initSelectors = _interopRequireWildcard(_selectors2);

var _actions = require('../errors/actions');

var _actions2 = require('../loadings/actions');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var initialize = exports.initialize = function initialize(list, location, path, locationValue, append) {
  return {
    type: types.INIIALIZE,
    payload: list,
    path: path,
    location: location,
    append: append,
    locationValue: locationValue
  };
};

var childAdded = exports.childAdded = function childAdded(child, location) {
  return {
    type: types.CHILD_ADDED,
    payload: child,
    location: location
  };
};

var childChanged = exports.childChanged = function childChanged(child, location) {
  return {
    type: types.CHILD_CHANGED,
    payload: child,
    location: location
  };
};

var childRemoved = exports.childRemoved = function childRemoved(child, location) {
  return {
    type: types.CHILD_REMOVED,
    payload: child,
    location: location
  };
};

var destroy = exports.destroy = function destroy(location) {
  return {
    type: types.DESTROY,
    location: location
  };
};

var unWatch = exports.unWatch = function unWatch(path) {
  return {
    type: types.UNWATCH,
    path: path
  };
};

var getPath = function getPath(firebaseApp, ref) {
  return ref._query.path.segments.join('/');
};

var getRef = exports.getRef = function getRef(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return firebaseApp.firestore().collection(path);
  } else {
    return path;
  }
};

var getLocation = exports.getLocation = function getLocation(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return path;
  } else {
    return getPath(firebaseApp, path);
  }
};

function watchCol(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var append = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var ref = getRef(firebaseApp, firebasePath);
  var path = getLocation(firebaseApp, firebasePath);
  var location = reduxPath || path;

  return function (dispatch, getState) {
    var isInitialized = initSelectors.isInitialised(getState(), path, location);
    var initialized = false;

    if (!isInitialized) {
      dispatch((0, _actions2.logLoading)(location));
      var unsub = ref.onSnapshot(function (snapshot) {
        snapshot.docChanges().forEach(function (change) {
          if (change.type === 'added') {
            if (initialized) {
              dispatch(childAdded({
                id: change.doc.id,
                data: change.doc.data()
              }, location));
            } else {
              initialized = true;
              dispatch(initialize([{
                id: change.doc.id,
                data: change.doc.data()
              }], location, path, unsub, append));
            }
          }
          if (change.type === 'modified') {
            dispatch(childChanged({
              id: change.doc.id,
              data: change.doc.data()
            }, location));
          }
          if (change.type === 'removed') {
            dispatch(childRemoved({
              id: change.doc.id,
              data: change.doc.data()
            }, location));
          }
        });
      }, function (err) {
        console.error(err);
        dispatch((0, _actions.logError)(location, err));
      });
    }
  };
}

function unwatchCol(firebaseApp, firebasePath) {
  return function (dispatch, getState) {
    var location = firebasePath;
    var allInitializations = selectors.getAllInitializations(getState());
    var unsubs = allInitializations[location];

    if (unsubs) {
      Object.keys(unsubs).map(function (key) {
        var unsub = unsubs[key];
        if (typeof unsub === 'function') {
          unsub();
        }
        dispatch(unWatch(location));
      });
    }
  };
}

function destroyCol(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch, getState) {
    var location = reduxPath || getLocation(firebaseApp, firebasePath);
    var locations = getState().initialization[location];

    dispatch(unWatch(location));
    dispatch(destroy(location));

    if (reduxPath) {
      dispatch(destroy(reduxPath));
      unwatchCol(firebaseApp, reduxPath);
    } else if (locations) {
      Object.keys(locations).forEach(function (location) {
        unwatchCol(firebaseApp, location);
        dispatch(destroy(location));
      });
    }
  };
}

function unwatchAllCol(firebaseApp, path) {
  return function (dispatch, getState) {
    var allLists = selectors.getAllCols(getState());

    Object.keys(allLists).forEach(function (key, index) {
      unwatchCol(firebaseApp, key);
      dispatch(unWatch(key));
    });
  };
}

function unwatchAllCols(firebaseApp, path) {
  return function (dispatch, getState) {
    var allColls = selectors.getAllCols(getState());

    Object.keys(allColls).forEach(function (key, index) {
      unwatchCol(firebaseApp, key);
      dispatch(destroyCol(firebaseApp, allColls[index]));
    });
  };
}