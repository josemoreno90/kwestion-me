'use strict';

exports.__esModule = true;
exports.onTokenChanged = onTokenChanged;
exports.onPermissionChanged = onPermissionChanged;
exports.onMessage = onMessage;
exports.clearMessage = clearMessage;
exports.onMessagingError = onMessagingError;
exports.initMessaging = initMessaging;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function onTokenChanged(token) {
  return {
    type: types.TOKEN_CHANGED,
    payload: { token: token, isInitialized: true }
  };
}

function onPermissionChanged(hasPermission, onMessage) {
  return {
    type: types.PERMISSION_CHANGED,
    payload: { hasPermission: hasPermission, isInitialized: true }
  };
}

function onMessage(message) {
  return {
    type: types.ON_MESSAGE,
    payload: { message: message }
  };
}
function clearMessage() {
  return {
    type: types.ON_CLEAR_MESSAGE
  };
}

function onMessagingError(error) {
  return {
    type: types.MESSAGING_ERROR,
    payload: { error: error }
  };
}

function initMessaging(firebaseApp, handleTokenChange, onMessageReceieved, onBackgroundMessageReceived) {
  return function (dispatch) {
    var messaging = firebaseApp.messaging();

    try {
      messaging.requestPermission().then(function () {
        return messaging.getToken();
      }).then(function (token) {
        if (handleTokenChange !== undefined && handleTokenChange instanceof Function) {
          handleTokenChange(token);
        }

        dispatch(onPermissionChanged(true));
        dispatch(onTokenChanged(token));
      }).catch(function (error) {
        dispatch(onPermissionChanged(false));
        console.warn(error);
      });
    } catch (e) {
      dispatch(onPermissionChanged(false));
      console.warn(e);
    }

    messaging.onMessage(function (payload) {
      if (onMessageReceieved !== undefined && onMessageReceieved instanceof Function) {
        onMessageReceieved(payload);
      }

      dispatch(onMessage(payload));
    });
  };
}