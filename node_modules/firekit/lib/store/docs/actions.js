'use strict';

exports.__esModule = true;
exports.getLocation = exports.getRef = exports.unWatch = exports.destroy = exports.valueChanged = undefined;
exports.watchDoc = watchDoc;
exports.unwatchDoc = unwatchDoc;
exports.destroyDoc = destroyDoc;
exports.unwatchAllDocs = unwatchAllDocs;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

var _selectors = require('./selectors');

var selectors = _interopRequireWildcard(_selectors);

var _selectors2 = require('../initialization/selectors');

var initSelectors = _interopRequireWildcard(_selectors2);

var _actions = require('../errors/actions');

var _actions2 = require('../loadings/actions');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var valueChanged = exports.valueChanged = function valueChanged(value, location, path, locationValue) {
  return {
    type: types.VALUE_CHANGED,
    payload: value,
    path: path,
    location: location,
    locationValue: locationValue
  };
};

var destroy = exports.destroy = function destroy(location) {
  return {
    type: types.DESTROY,
    location: location
  };
};

var unWatch = exports.unWatch = function unWatch(path) {
  return {
    type: types.UNWATCH,
    path: path
  };
};

var getRef = exports.getRef = function getRef(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return firebaseApp.firestore().doc(path);
  } else {
    return path;
  }
};

var getLocation = exports.getLocation = function getLocation(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return path;
  } else {
    return firebaseApp.firestore().doc(path).path;
  }
};

function watchDoc(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var ref = getRef(firebaseApp, firebasePath);
  var path = ref.path;
  var location = reduxPath || getLocation(firebaseApp, firebasePath);

  return function (dispatch, getState) {
    var isInitialized = initSelectors.isInitialised(getState(), location);

    if (!isInitialized) {
      dispatch((0, _actions2.logLoading)(location));

      var unsub = ref.onSnapshot(function (doc) {
        dispatch(valueChanged(doc.data(), location, path, unsub));
      }, function (err) {
        console.error(err);
        dispatch((0, _actions.logError)(location, err));
      });
    }
  };
}

function unwatchDoc(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch, getState) {
    var location = reduxPath || path;
    var allInitializations = selectors.getAllInitializations(getState());
    var unsubs = allInitializations[location];

    if (unsubs) {
      Object.keys(unsubs).map(function (key) {
        var unsub = unsubs[key];
        if (typeof unsub === 'function') {
          unsub();
        }
        dispatch(unWatch(location));
      });
    }
  };
}

function destroyDoc(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var location = reduxPath || path;

  return function (dispatch) {
    unwatchDoc(firebaseApp, location);
    dispatch(unWatch(location));
    dispatch(destroy(location));
  };
}

function unwatchAllDocs(firebaseApp) {
  return function (dispatch, getState) {
    var allPaths = selectors.getAllDocs(getState());

    Object.keys(allPaths).forEach(function (key, index) {
      unwatchDoc(firebaseApp, allPaths[index]);
      dispatch(unWatch(key));
    });
  };
}