'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.authStateChanged = authStateChanged;
exports.authError = authError;
exports.defaultUserData = defaultUserData;
exports.watchAuth = watchAuth;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function authStateChanged(user) {
  return {
    type: types.AUTH_STATE_CHANGED,
    payload: user
  };
}

function authError(error) {
  return {
    type: types.AUTH_ERROR,
    payload: error
  };
}

function defaultUserData(user) {
  if (user != null) {
    return {
      displayName: user.displayName,
      email: user.email,
      photoURL: user.photoURL,
      emailVerified: user.emailVerified,
      isAnonymous: user.isAnonymous,
      uid: user.uid,
      providerData: user.providerData,
      isAuthorised: true
    };
  } else {
    return {
      isAuthorised: false
    };
  }
}

function watchAuth(firebaseApp, onAuthStateChanged, onAuthError) {
  return function (dispatch) {
    firebaseApp.auth().onAuthStateChanged(function (user) {
      if (onAuthStateChanged && onAuthStateChanged instanceof Function) {
        dispatch(authStateChanged(_extends({ isAuthorised: !!user }, onAuthStateChanged(user))));
      } else {
        dispatch(authStateChanged(_extends({ isAuthorised: !!user }, defaultUserData(user))));
      }
    }, function (error) {
      if (onAuthError && onAuthError instanceof Function) {
        dispatch(authError(error));
      } else {
        dispatch(authError(error));
      }
    });
  };
}