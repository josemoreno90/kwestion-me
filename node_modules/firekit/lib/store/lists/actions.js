'use strict';

exports.__esModule = true;
exports.getLocation = exports.getRef = exports.unWatch = exports.destroy = exports.childRemoved = exports.childChanged = exports.childAdded = exports.initialize = undefined;
exports.watchList = watchList;
exports.unwatchList = unwatchList;
exports.destroyList = destroyList;
exports.unwatchAllLists = unwatchAllLists;
exports.destroyAllLists = destroyAllLists;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

var _selectors = require('./selectors');

var selectors = _interopRequireWildcard(_selectors);

var _selectors2 = require('../initialization/selectors');

var initSelectors = _interopRequireWildcard(_selectors2);

var _actions = require('../errors/actions');

var _actions2 = require('../loadings/actions');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var initialize = exports.initialize = function initialize(list, location, path, append) {
  return {
    type: types.INIIALIZE,
    payload: list,
    path: path,
    location: location,
    append: append,
    locationValue: true
  };
};

var childAdded = exports.childAdded = function childAdded(child, location) {
  return {
    type: types.CHILD_ADDED,
    payload: child,
    location: location
  };
};

var childChanged = exports.childChanged = function childChanged(child, location) {
  return {
    type: types.CHILD_CHANGED,
    payload: child,
    location: location
  };
};

var childRemoved = exports.childRemoved = function childRemoved(child, location) {
  return {
    type: types.CHILD_REMOVED,
    payload: child,
    location: location
  };
};

var destroy = exports.destroy = function destroy(location) {
  return {
    type: types.DESTROY,
    location: location
  };
};

var unWatch = exports.unWatch = function unWatch(path) {
  return {
    type: types.UNWATCH,
    path: path
  };
};

var getPayload = function getPayload(snapshot) {
  return { key: snapshot.key, val: snapshot.val() };
};

var getRef = exports.getRef = function getRef(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return firebaseApp.database().ref(path);
  } else {
    return path;
  }
};

var getLocation = exports.getLocation = function getLocation(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return path;
  } else {
    return path.toString().substring(firebaseApp.database().ref().root.toString().length);
  }
};

function watchList(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var append = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var ref = getRef(firebaseApp, firebasePath);
  var path = ref.toString();
  var location = reduxPath || getLocation(firebaseApp, firebasePath);

  return function (dispatch, getState) {
    var initialized = false;
    var isInitialized = initSelectors.isInitialised(getState(), path, location);
    var persistetList = getState().lists ? getState().lists[location] : [];

    if (!isInitialized) {
      dispatch(initialize(persistetList, location, path, append));
      dispatch((0, _actions2.logLoading)(location));
      ref.once('value', function (snapshot) {
        initialized = true;

        var list = [];

        snapshot.forEach(function (childSnapshot) {
          var childKey = childSnapshot.key;
          var childData = childSnapshot.val();

          list.push({ key: childKey, val: childData });
        });

        dispatch(initialize(list, location, path, append));
      }, function (err) {
        console.error(err);
        dispatch((0, _actions.logError)(location, err));
      });

      ref.on('child_added', function (snapshot) {
        if (initialized) {
          dispatch(childAdded(getPayload(snapshot), location));
        }
      }, function (err) {
        console.error(err);
        dispatch((0, _actions.logError)(location, err));
      });

      ref.on('child_changed', function (snapshot) {
        dispatch(childChanged(getPayload(snapshot), location));
      }, function (err) {
        console.error(err);
        dispatch((0, _actions.logError)(location, err));
      });

      ref.on('child_removed', function (snapshot) {
        dispatch(childRemoved(getPayload(snapshot), location));
      }, function (err) {
        console.error(err);
        dispatch((0, _actions.logError)(location, err));
      });
    }
  };
}

function unwatchList(firebaseApp, firebasePath) {
  return function (dispatch) {
    var ref = getRef(firebaseApp, firebasePath);
    ref.off();
    dispatch(unWatch(ref.toString()));
  };
}

function destroyList(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch, getState) {
    var ref = getRef(firebaseApp, firebasePath);
    var locations = getState().initialization[ref.toString()];

    ref.off();
    dispatch(unWatch(ref.toString()));

    if (reduxPath) {
      dispatch(destroy(reduxPath));
    } else if (locations) {
      Object.keys(locations).forEach(function (location) {
        dispatch(destroy(location));
      });
    }
  };
}

function unwatchAllLists(firebaseApp, path) {
  return function (dispatch, getState) {
    var allLists = selectors.getAllLists(getState());

    Object.keys(allLists).forEach(function (key, index) {
      var ref = firebaseApp.database().ref(key);
      ref.off();
      dispatch(unWatch(ref.toString()));
    });
  };
}

function destroyAllLists(firebaseApp, path) {
  return function (dispatch, getState) {
    var allLists = selectors.getAllLists(getState());

    Object.keys(allLists).forEach(function (key, index) {
      var ref = firebaseApp.database().ref(key);
      ref.off();
      dispatch(destroyList(firebaseApp, ref.toString()));
    });
  };
}