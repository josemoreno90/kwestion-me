/*!
 * firekit v1.0.27 - https://www.react-most-wanted.com/
 * MIT Licensed
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["firekit"] = factory();
	else
		root["firekit"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/store/auth/types.js
var AUTH_STATE_CHANGED = "@@firekit/AUTH@AUTH_STATE_CHANGED";
var AUTH_ERROR = "@@firekit/AUTH@AUTH_ERROR";
// CONCATENATED MODULE: ./src/store/auth/reducer.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



var initialState = {};

function auth() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var _ref = arguments[1];
  var payload = _ref.payload,
      type = _ref.type;

  switch (type) {
    case AUTH_STATE_CHANGED:
      return _extends({}, state, payload);

    case AUTH_ERROR:
      return _extends({}, state, { error: payload });

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/collections/types.js
var APPEND_INIIALIZE = "@@firekit/COLLECTIONS@APPEND_INIIALIZE";
var INIIALIZE = "@@firekit/COLLECTIONS@INIIALIZE";
var DESTROY = "@@firekit/COLLECTIONS@DESTROY";
var UNWATCH = "@@firekit/COLLECTIONS@UNWATCH";
var CHILD_ADDED = "@@firekit/COLLECTIONS@CHILD_ADDED";
var CHILD_CHANGED = "@@firekit/COLLECTIONS@CHILD_CHANGED";
var CHILD_REMOVED = "@@firekit/COLLECTIONS@CHILD_REMOVED";
// CONCATENATED MODULE: ./src/store/collections/reducer.js
var reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }



function collection() {
  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];
  var payload = action.payload,
      append = action.append;

  switch (action.type) {
    case INIIALIZE:
      return append ? [].concat(list, payload) : payload;

    case CHILD_ADDED:
      return list.findIndex(function (d) {
        return d.id === payload.id;
      }) === -1 ? [].concat(list, [payload]) : [].concat(list);

    case CHILD_CHANGED:
      return list.map(function (child) {
        return payload.id === child.id ? payload : child;
      });

    case CHILD_REMOVED:
      return list.filter(function (child) {
        return payload.id !== child.id;
      });
  }
}

function collections() {
  var _extends2, _extends3;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var location = action.location;


  switch (action.type) {
    case INIIALIZE:
      return reducer_extends({}, state, (_extends2 = {}, _extends2[location] = collection(state[action.location], action), _extends2));

    case CHILD_ADDED:
    case CHILD_CHANGED:
    case CHILD_REMOVED:
      return reducer_extends({}, state, (_extends3 = {}, _extends3[location] = collection(state[action.location], action), _extends3));

    case DESTROY:
      var omitData = state[location],
          rest = _objectWithoutProperties(state, [location]);

      return reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/connection/types.js
var ON_CONNECTION_STATE_CHANGED = "@@firekit/CONNECTION@ON_CONNECTION_STATE_CHANGED";
// CONCATENATED MODULE: ./src/store/connection/reducer.js
var connection_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



var reducer_initialState = {
  isConnected: true
};

function connection() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : reducer_initialState;
  var _ref = arguments[1];
  var payload = _ref.payload,
      type = _ref.type;

  switch (type) {
    case ON_CONNECTION_STATE_CHANGED:
      return connection_reducer_extends({}, state, payload);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/docs/types.js
var types_INIIALIZE = "@@firekit/DOCS@INIIALIZE";
var types_DESTROY = "@@firekit/DOCS@DESTROY";
var types_UNWATCH = "@@firekit/DOCS@UNWATCH";
var VALUE_CHANGED = "@@firekit/DOCS@VALUE_CHANGED";
// CONCATENATED MODULE: ./src/store/docs/reducer.js
var docs_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function reducer_objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }



function docs() {
  var _extends2;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var location = action.location;


  switch (action.type) {
    case VALUE_CHANGED:
      return docs_reducer_extends({}, state, (_extends2 = {}, _extends2[location] = action.payload, _extends2));

    case types_DESTROY:
      var omitData = state[location],
          rest = reducer_objectWithoutProperties(state, [location]);

      return docs_reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/lists/types.js
var types_APPEND_INIIALIZE = "@@firekit/LISTS@APPEND_INIIALIZE";
var lists_types_INIIALIZE = "@@firekit/LISTS@INIIALIZE";
var lists_types_DESTROY = "@@firekit/LISTS@DESTROY";
var lists_types_UNWATCH = "@@firekit/LISTS@UNWATCH";
var types_CHILD_ADDED = "@@firekit/LISTS@CHILD_ADDED";
var types_CHILD_CHANGED = "@@firekit/LISTS@CHILD_CHANGED";
var types_CHILD_REMOVED = "@@firekit/LISTS@CHILD_REMOVED";
// CONCATENATED MODULE: ./src/store/paths/types.js
var paths_types_INIIALIZE = "@@firekit/PATHS@INIIALIZE";
var paths_types_DESTROY = "@@firekit/PATHS@DESTROY";
var paths_types_UNWATCH = "@@firekit/PATHS@UNWATCH";
var types_VALUE_CHANGED = "@@firekit/PATHS@VALUE_CHANGED";
// CONCATENATED MODULE: ./src/store/errors/types.js
var LOG_ERROR = "@@firekit/ERRORS@LOG_ERROR";
var CLEAR_ERROR = "@@firekit/ERRORS@CLEAR_ERROR";
var CLEAR_ALL_ERRORS = "@@firekit/ERRORS@CLEAR_ALL_ERRORS";
// CONCATENATED MODULE: ./src/store/errors/reducer.js
var errors_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function errors_reducer_objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }







function errors() {
  var _extends2;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var location = action.location,
      err = action.err;


  switch (action.type) {
    case LOG_ERROR:
      return errors_reducer_extends({}, state, (_extends2 = {}, _extends2[location] = err, _extends2));

    case CLEAR_ALL_ERRORS:
      return {};

    case CLEAR_ERROR:
    case INIIALIZE:
    case lists_types_INIIALIZE:
    case types_VALUE_CHANGED:
    case VALUE_CHANGED:
    case lists_types_DESTROY:
    case lists_types_UNWATCH:
    case DESTROY:
    case UNWATCH:
    case paths_types_DESTROY:
    case paths_types_UNWATCH:
    case types_DESTROY:
    case types_UNWATCH:
      var omit = state[location],
          rest = errors_reducer_objectWithoutProperties(state, [location]);

      return errors_reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/initialization/types.js
var CLEAR_INITIALIZATION = "@@firekit/INITIALIZATION@CLEAR_INITIALIZATION";
// CONCATENATED MODULE: ./src/store/initialization/reducer.js
var initialization_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function initialization_reducer_objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }







function locations() {
  var _extends2;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];
  var location = action.location,
      locationValue = action.locationValue;

  switch (action.type) {
    case lists_types_INIIALIZE:
    case INIIALIZE:
    case types_VALUE_CHANGED:
    case VALUE_CHANGED:
      return initialization_reducer_extends({}, state, (_extends2 = {}, _extends2[location] = locationValue, _extends2));
  }
}

function initialization() {
  var _extends3;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var path = action.path;


  switch (action.type) {
    case lists_types_INIIALIZE:
    case INIIALIZE:
    case types_VALUE_CHANGED:
    case VALUE_CHANGED:
      return initialization_reducer_extends({}, state, (_extends3 = {}, _extends3[path] = locations(state[path], action), _extends3));

    case CLEAR_INITIALIZATION:
      return {};

    case lists_types_DESTROY:
    case lists_types_UNWATCH:
    case DESTROY:
    case UNWATCH:
    case paths_types_DESTROY:
    case paths_types_UNWATCH:
    case types_DESTROY:
    case types_UNWATCH:
      var omit = state[path],
          rest = initialization_reducer_objectWithoutProperties(state, [path]);

      return initialization_reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/lists/reducer.js
var lists_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function lists_reducer_objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }



function reducer_list() {
  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];
  var payload = action.payload,
      append = action.append;

  switch (action.type) {
    case lists_types_INIIALIZE:
      return append ? [].concat(list, payload) : payload;

    case types_CHILD_ADDED:
      return list.findIndex(function (d) {
        return d.key === payload.key;
      }) === -1 ? [].concat(list, [payload]) : [].concat(list);

    case types_CHILD_CHANGED:
      return list.map(function (child) {
        return payload.key === child.key ? payload : child;
      });

    case types_CHILD_REMOVED:
      return list.filter(function (child) {
        return payload.key !== child.key;
      });
  }
}

function lists() {
  var _extends2, _extends3;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var location = action.location;


  switch (action.type) {
    case lists_types_INIIALIZE:
      return lists_reducer_extends({}, state, (_extends2 = {}, _extends2[location] = reducer_list(state[action.location], action), _extends2));

    case types_CHILD_ADDED:
    case types_CHILD_CHANGED:
    case types_CHILD_REMOVED:
      return lists_reducer_extends({}, state, (_extends3 = {}, _extends3[location] = reducer_list(state[action.location], action), _extends3));

    case lists_types_DESTROY:
      var omitData = state[location],
          rest = lists_reducer_objectWithoutProperties(state, [location]);

      return lists_reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/loadings/types.js
var LOG_LOADING = "@@firekit/LOADING@LOG_LOADING";
var CLEAR_LOADING = "@@firekit/LOADING@CLEAR_LOADING";
var CLEAR_ALL_LOADINGS = "@@firekit/LOADING@CLEAR_ALL_LOADINGS";
// CONCATENATED MODULE: ./src/store/loadings/reducer.js
var loadings_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function loadings_reducer_objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }








function loadings() {
  var _extends2;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var location = action.location;


  switch (action.type) {
    case LOG_LOADING:
      return loadings_reducer_extends({}, state, (_extends2 = {}, _extends2[location] = true, _extends2));

    case CLEAR_ALL_LOADINGS:
      return {};

    case CLEAR_LOADING:
    case INIIALIZE:
    case lists_types_INIIALIZE:
    case types_VALUE_CHANGED:
    case VALUE_CHANGED:
    case lists_types_DESTROY:
    case lists_types_UNWATCH:
    case DESTROY:
    case UNWATCH:
    case paths_types_DESTROY:
    case paths_types_UNWATCH:
    case types_DESTROY:
    case types_UNWATCH:
    case LOG_ERROR:
      var omit = state[location],
          rest = loadings_reducer_objectWithoutProperties(state, [location]);

      return loadings_reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/messaging/types.js
var TOKEN_CHANGED = "@@firekit/MESSAGING@TOKEN_CHANGED";
var PERMISSION_CHANGED = "@@firekit/MESSAGING@PERMISSION_CHANGED";
var MESSAGING_ERROR = "@@firekit/MESSAGING@MESSAGING_ERROR";
var ON_MESSAGE = "@@firekit/MESSAGING@ON_MESSAGE";
var ON_CLEAR_MESSAGE = "@@firekit/MESSAGING@ON_CLEAR_MESSAGE";
// CONCATENATED MODULE: ./src/store/messaging/reducer.js
var messaging_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function messaging_reducer_objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }



var messaging_reducer_initialState = {
  hasPermission: false,
  token: undefined
};

function messaging() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : messaging_reducer_initialState;
  var _ref = arguments[1];
  var payload = _ref.payload,
      type = _ref.type;

  switch (type) {
    case PERMISSION_CHANGED:
    case TOKEN_CHANGED:
    case MESSAGING_ERROR:
    case ON_MESSAGE:
      return messaging_reducer_extends({}, state, payload);

    case ON_CLEAR_MESSAGE:
      var message = state.message,
          rest = messaging_reducer_objectWithoutProperties(state, ['message']);

      return messaging_reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/paths/reducer.js
var paths_reducer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function paths_reducer_objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }



function paths() {
  var _extends2;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var location = action.location;


  switch (action.type) {
    case types_VALUE_CHANGED:
      return paths_reducer_extends({}, state, (_extends2 = {}, _extends2[location] = action.payload, _extends2));

    case paths_types_DESTROY:
      var omitData = state[location],
          rest = paths_reducer_objectWithoutProperties(state, [location]);

      return paths_reducer_extends({}, rest);

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./src/store/initialization/actions.js


function clearInitialization() {
  return {
    type: CLEAR_INITIALIZATION
  };
}
// CONCATENATED MODULE: ./src/store/errors/actions.js


function logError(location, err) {
  return {
    type: LOG_ERROR,
    location: location,
    err: err
  };
}
function clearError(location) {
  return {
    type: CLEAR_ERROR,
    location: location
  };
}

function clearAllErrors() {
  return {
    type: CLEAR_ALL_ERRORS
  };
}
// CONCATENATED MODULE: ./src/store/connection/actions.js



function onConnectionStateChange(isConnected) {
  return {
    type: ON_CONNECTION_STATE_CHANGED,
    payload: { isConnected: isConnected }
  };
}

function initConnection(firebaseApp, onChange) {
  return function (dispatch) {
    firebaseApp.database().ref('.info/connected').on('value', function (snapshot) {
      dispatch(onConnectionStateChange(snapshot.val()));

      if (onChange !== undefined && onChange instanceof Function) {
        onChange(snapshot.val());
      }
    }, function (err) {
      console.error(err);
      dispatch(logError('.info/connected', err));
    });
  };
}

function unsubscribeConnection(firebaseApp) {
  return function (dispatch) {
    firebaseApp.database().ref('.info/connected').off();
    dispatch(onConnectionStateChange(false));
  };
}
// CONCATENATED MODULE: ./src/store/messaging/actions.js


function onTokenChanged(token) {
  return {
    type: TOKEN_CHANGED,
    payload: { token: token, isInitialized: true }
  };
}

function onPermissionChanged(hasPermission, onMessage) {
  return {
    type: PERMISSION_CHANGED,
    payload: { hasPermission: hasPermission, isInitialized: true }
  };
}

function actions_onMessage(message) {
  return {
    type: ON_MESSAGE,
    payload: { message: message }
  };
}
function clearMessage() {
  return {
    type: ON_CLEAR_MESSAGE
  };
}

function onMessagingError(error) {
  return {
    type: MESSAGING_ERROR,
    payload: { error: error }
  };
}

function initMessaging(firebaseApp, handleTokenChange, onMessageReceieved, onBackgroundMessageReceived) {
  return function (dispatch) {
    var messaging = firebaseApp.messaging();

    try {
      messaging.requestPermission().then(function () {
        return messaging.getToken();
      }).then(function (token) {
        if (handleTokenChange !== undefined && handleTokenChange instanceof Function) {
          handleTokenChange(token);
        }

        dispatch(onPermissionChanged(true));
        dispatch(onTokenChanged(token));
      }).catch(function (error) {
        dispatch(onPermissionChanged(false));
        console.warn(error);
      });
    } catch (e) {
      dispatch(onPermissionChanged(false));
      console.warn(e);
    }

    messaging.onMessage(function (payload) {
      if (onMessageReceieved !== undefined && onMessageReceieved instanceof Function) {
        onMessageReceieved(payload);
      }

      dispatch(actions_onMessage(payload));
    });
  };
}
// CONCATENATED MODULE: ./src/store/loadings/actions.js


function logLoading(location) {
  return {
    type: LOG_LOADING,
    location: location
  };
}
function clearLoading(location) {
  return {
    type: CLEAR_LOADING,
    location: location
  };
}

function clearAllLoadings() {
  return {
    type: CLEAR_ALL_LOADINGS
  };
}
// CONCATENATED MODULE: ./src/store/auth/actions.js
var actions_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



function authStateChanged(user) {
  return {
    type: AUTH_STATE_CHANGED,
    payload: user
  };
}

function authError(error) {
  return {
    type: AUTH_ERROR,
    payload: error
  };
}

function defaultUserData(user) {
  if (user != null) {
    return {
      displayName: user.displayName,
      email: user.email,
      photoURL: user.photoURL,
      emailVerified: user.emailVerified,
      isAnonymous: user.isAnonymous,
      uid: user.uid,
      providerData: user.providerData,
      isAuthorised: true
    };
  } else {
    return {
      isAuthorised: false
    };
  }
}

function watchAuth(firebaseApp, onAuthStateChanged, onAuthError) {
  return function (dispatch) {
    firebaseApp.auth().onAuthStateChanged(function (user) {
      if (onAuthStateChanged && onAuthStateChanged instanceof Function) {
        dispatch(authStateChanged(actions_extends({ isAuthorised: !!user }, onAuthStateChanged(user))));
      } else {
        dispatch(authStateChanged(actions_extends({ isAuthorised: !!user }, defaultUserData(user))));
      }
    }, function (error) {
      if (onAuthError && onAuthError instanceof Function) {
        dispatch(authError(error));
      } else {
        dispatch(authError(error));
      }
    });
  };
}
// CONCATENATED MODULE: ./src/store/collections/selectors.js
function getAllCols(state) {
  return state.collections;
}

function getAllInitializations(state) {
  return state.initialization;
}

function getCol(state, location) {
  if (state.collections !== undefined && state.collections[location]) {
    return state.collections[location];
  }

  return [];
}
// CONCATENATED MODULE: ./src/store/initialization/selectors.js
function isInitialised(state, path, location) {
  if (state.initialization !== undefined && state.initialization[path]) {
    return state.initialization[path][location];
  }

  return false;
}
// CONCATENATED MODULE: ./src/store/collections/actions.js






var actions_initialize = function initialize(list, location, path, locationValue, append) {
  return {
    type: INIIALIZE,
    payload: list,
    path: path,
    location: location,
    append: append,
    locationValue: locationValue
  };
};

var actions_childAdded = function childAdded(child, location) {
  return {
    type: CHILD_ADDED,
    payload: child,
    location: location
  };
};

var actions_childChanged = function childChanged(child, location) {
  return {
    type: CHILD_CHANGED,
    payload: child,
    location: location
  };
};

var actions_childRemoved = function childRemoved(child, location) {
  return {
    type: CHILD_REMOVED,
    payload: child,
    location: location
  };
};

var actions_destroy = function destroy(location) {
  return {
    type: DESTROY,
    location: location
  };
};

var actions_unWatch = function unWatch(path) {
  return {
    type: UNWATCH,
    path: path
  };
};

var getPath = function getPath(firebaseApp, ref) {
  return ref._query.path.segments.join('/');
};

var getRef = function getRef(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return firebaseApp.firestore().collection(path);
  } else {
    return path;
  }
};

var getLocation = function getLocation(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return path;
  } else {
    return getPath(firebaseApp, path);
  }
};

function watchCol(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var append = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var ref = getRef(firebaseApp, firebasePath);
  var path = getLocation(firebaseApp, firebasePath);
  var location = reduxPath || path;

  return function (dispatch, getState) {
    var isInitialized = isInitialised(getState(), path, location);
    var initialized = false;

    if (!isInitialized) {
      dispatch(logLoading(location));
      var unsub = ref.onSnapshot(function (snapshot) {
        snapshot.docChanges().forEach(function (change) {
          if (change.type === 'added') {
            if (initialized) {
              dispatch(actions_childAdded({
                id: change.doc.id,
                data: change.doc.data()
              }, location));
            } else {
              initialized = true;
              dispatch(actions_initialize([{
                id: change.doc.id,
                data: change.doc.data()
              }], location, path, unsub, append));
            }
          }
          if (change.type === 'modified') {
            dispatch(actions_childChanged({
              id: change.doc.id,
              data: change.doc.data()
            }, location));
          }
          if (change.type === 'removed') {
            dispatch(actions_childRemoved({
              id: change.doc.id,
              data: change.doc.data()
            }, location));
          }
        });
      }, function (err) {
        console.error(err);
        dispatch(logError(location, err));
      });
    }
  };
}

function unwatchCol(firebaseApp, firebasePath) {
  return function (dispatch, getState) {
    var location = firebasePath;
    var allInitializations = getAllInitializations(getState());
    var unsubs = allInitializations[location];

    if (unsubs) {
      Object.keys(unsubs).map(function (key) {
        var unsub = unsubs[key];
        if (typeof unsub === 'function') {
          unsub();
        }
        dispatch(actions_unWatch(location));
      });
    }
  };
}

function destroyCol(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch, getState) {
    var location = reduxPath || getLocation(firebaseApp, firebasePath);
    var locations = getState().initialization[location];

    dispatch(actions_unWatch(location));
    dispatch(actions_destroy(location));

    if (reduxPath) {
      dispatch(actions_destroy(reduxPath));
      unwatchCol(firebaseApp, reduxPath);
    } else if (locations) {
      Object.keys(locations).forEach(function (location) {
        unwatchCol(firebaseApp, location);
        dispatch(actions_destroy(location));
      });
    }
  };
}

function unwatchAllCol(firebaseApp, path) {
  return function (dispatch, getState) {
    var allLists = getAllCols(getState());

    Object.keys(allLists).forEach(function (key, index) {
      unwatchCol(firebaseApp, key);
      dispatch(actions_unWatch(key));
    });
  };
}

function unwatchAllCols(firebaseApp, path) {
  return function (dispatch, getState) {
    var allColls = getAllCols(getState());

    Object.keys(allColls).forEach(function (key, index) {
      unwatchCol(firebaseApp, key);
      dispatch(destroyCol(firebaseApp, allColls[index]));
    });
  };
}
// CONCATENATED MODULE: ./src/store/docs/selectors.js
function getAllDocs(state) {
  return state.docs;
}

function selectors_getAllInitializations(state) {
  return state.initialization;
}

function getDoc(state, location) {
  if (state.docs !== undefined && state.docs[location]) {
    return state.docs[location];
  }

  return null;
}
// CONCATENATED MODULE: ./src/store/docs/actions.js






var actions_valueChanged = function valueChanged(value, location, path, locationValue) {
  return {
    type: VALUE_CHANGED,
    payload: value,
    path: path,
    location: location,
    locationValue: locationValue
  };
};

var docs_actions_destroy = function destroy(location) {
  return {
    type: types_DESTROY,
    location: location
  };
};

var docs_actions_unWatch = function unWatch(path) {
  return {
    type: types_UNWATCH,
    path: path
  };
};

var actions_getRef = function getRef(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return firebaseApp.firestore().doc(path);
  } else {
    return path;
  }
};

var actions_getLocation = function getLocation(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return path;
  } else {
    return firebaseApp.firestore().doc(path).path;
  }
};

function watchDoc(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var ref = actions_getRef(firebaseApp, firebasePath);
  var path = ref.path;
  var location = reduxPath || actions_getLocation(firebaseApp, firebasePath);

  return function (dispatch, getState) {
    var isInitialized = isInitialised(getState(), location);

    if (!isInitialized) {
      dispatch(logLoading(location));

      var unsub = ref.onSnapshot(function (doc) {
        dispatch(actions_valueChanged(doc.data(), location, path, unsub));
      }, function (err) {
        console.error(err);
        dispatch(logError(location, err));
      });
    }
  };
}

function unwatchDoc(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch, getState) {
    var location = reduxPath || path;
    var allInitializations = selectors_getAllInitializations(getState());
    var unsubs = allInitializations[location];

    if (unsubs) {
      Object.keys(unsubs).map(function (key) {
        var unsub = unsubs[key];
        if (typeof unsub === 'function') {
          unsub();
        }
        dispatch(docs_actions_unWatch(location));
      });
    }
  };
}

function destroyDoc(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var location = reduxPath || path;

  return function (dispatch) {
    unwatchDoc(firebaseApp, location);
    dispatch(docs_actions_unWatch(location));
    dispatch(docs_actions_destroy(location));
  };
}

function unwatchAllDocs(firebaseApp) {
  return function (dispatch, getState) {
    var allPaths = getAllDocs(getState());

    Object.keys(allPaths).forEach(function (key, index) {
      unwatchDoc(firebaseApp, allPaths[index]);
      dispatch(docs_actions_unWatch(key));
    });
  };
}
// CONCATENATED MODULE: ./src/store/lists/selectors.js
function getAllLists(state) {
  return state.lists;
}

function getList(state, location) {
  if (state.lists !== undefined && state.lists[location]) {
    return state.lists[location];
  }

  return [];
}
// CONCATENATED MODULE: ./src/store/lists/actions.js






var lists_actions_initialize = function initialize(list, location, path, append) {
  return {
    type: lists_types_INIIALIZE,
    payload: list,
    path: path,
    location: location,
    append: append,
    locationValue: true
  };
};

var lists_actions_childAdded = function childAdded(child, location) {
  return {
    type: types_CHILD_ADDED,
    payload: child,
    location: location
  };
};

var lists_actions_childChanged = function childChanged(child, location) {
  return {
    type: types_CHILD_CHANGED,
    payload: child,
    location: location
  };
};

var lists_actions_childRemoved = function childRemoved(child, location) {
  return {
    type: types_CHILD_REMOVED,
    payload: child,
    location: location
  };
};

var lists_actions_destroy = function destroy(location) {
  return {
    type: lists_types_DESTROY,
    location: location
  };
};

var lists_actions_unWatch = function unWatch(path) {
  return {
    type: lists_types_UNWATCH,
    path: path
  };
};

var getPayload = function getPayload(snapshot) {
  return { key: snapshot.key, val: snapshot.val() };
};

var lists_actions_getRef = function getRef(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return firebaseApp.database().ref(path);
  } else {
    return path;
  }
};

var lists_actions_getLocation = function getLocation(firebaseApp, path) {
  if (typeof path === 'string' || path instanceof String) {
    return path;
  } else {
    return path.toString().substring(firebaseApp.database().ref().root.toString().length);
  }
};

function watchList(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var append = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var ref = lists_actions_getRef(firebaseApp, firebasePath);
  var path = ref.toString();
  var location = reduxPath || lists_actions_getLocation(firebaseApp, firebasePath);

  return function (dispatch, getState) {
    var initialized = false;
    var isInitialized = isInitialised(getState(), path, location);
    var persistetList = getState().lists ? getState().lists[location] : [];

    if (!isInitialized) {
      dispatch(lists_actions_initialize(persistetList, location, path, append));
      dispatch(logLoading(location));
      ref.once('value', function (snapshot) {
        initialized = true;

        var list = [];

        snapshot.forEach(function (childSnapshot) {
          var childKey = childSnapshot.key;
          var childData = childSnapshot.val();

          list.push({ key: childKey, val: childData });
        });

        dispatch(lists_actions_initialize(list, location, path, append));
      }, function (err) {
        console.error(err);
        dispatch(logError(location, err));
      });

      ref.on('child_added', function (snapshot) {
        if (initialized) {
          dispatch(lists_actions_childAdded(getPayload(snapshot), location));
        }
      }, function (err) {
        console.error(err);
        dispatch(logError(location, err));
      });

      ref.on('child_changed', function (snapshot) {
        dispatch(lists_actions_childChanged(getPayload(snapshot), location));
      }, function (err) {
        console.error(err);
        dispatch(logError(location, err));
      });

      ref.on('child_removed', function (snapshot) {
        dispatch(lists_actions_childRemoved(getPayload(snapshot), location));
      }, function (err) {
        console.error(err);
        dispatch(logError(location, err));
      });
    }
  };
}

function unwatchList(firebaseApp, firebasePath) {
  return function (dispatch) {
    var ref = lists_actions_getRef(firebaseApp, firebasePath);
    ref.off();
    dispatch(lists_actions_unWatch(ref.toString()));
  };
}

function destroyList(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch, getState) {
    var ref = lists_actions_getRef(firebaseApp, firebasePath);
    var locations = getState().initialization[ref.toString()];

    ref.off();
    dispatch(lists_actions_unWatch(ref.toString()));

    if (reduxPath) {
      dispatch(lists_actions_destroy(reduxPath));
    } else if (locations) {
      Object.keys(locations).forEach(function (location) {
        dispatch(lists_actions_destroy(location));
      });
    }
  };
}

function unwatchAllLists(firebaseApp, path) {
  return function (dispatch, getState) {
    var allLists = getAllLists(getState());

    Object.keys(allLists).forEach(function (key, index) {
      var ref = firebaseApp.database().ref(key);
      ref.off();
      dispatch(lists_actions_unWatch(ref.toString()));
    });
  };
}

function destroyAllLists(firebaseApp, path) {
  return function (dispatch, getState) {
    var allLists = getAllLists(getState());

    Object.keys(allLists).forEach(function (key, index) {
      var ref = firebaseApp.database().ref(key);
      ref.off();
      dispatch(destroyList(firebaseApp, ref.toString()));
    });
  };
}
// CONCATENATED MODULE: ./src/store/paths/selectors.js
function getAllPaths(state) {
  return state.paths;
}

function selectors_getPath(state, location) {
  if (state.paths !== undefined && state.paths[location]) {
    return state.paths[location];
  }

  return {};
}
// CONCATENATED MODULE: ./src/store/paths/actions.js






var paths_actions_valueChanged = function valueChanged(value, location, path) {
  return {
    type: types_VALUE_CHANGED,
    payload: value,
    path: path,
    location: location,
    locationValue: true
  };
};

var paths_actions_destroy = function destroy(location) {
  return {
    type: paths_types_DESTROY,
    location: location
  };
};

var paths_actions_unWatch = function unWatch(path) {
  return {
    type: paths_types_UNWATCH,
    path: path
  };
};

function watchPath(firebaseApp, firebasePath) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var logLoad = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var location = reduxPath || firebasePath;

  return function (dispatch, getState) {
    var isInitialized = isInitialised(getState(), location);

    if (!isInitialized) {
      var ref = firebaseApp.database().ref(firebasePath);
      var path = ref.toString();

      if (logLoad) {
        dispatch(logLoading(location));
      }

      ref.on('value', function (snapshot) {
        dispatch(paths_actions_valueChanged(snapshot.val(), location, path));
      }, function (err) {
        dispatch(logError(location, err));
      });
    }
  };
}

function unwatchPath(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  return function (dispatch) {
    var location = reduxPath || path;
    firebaseApp.database().ref(path).off();
    dispatch(paths_actions_unWatch(location));
  };
}

function destroyPath(firebaseApp, path) {
  var reduxPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var location = reduxPath || path;

  return function (dispatch) {
    firebaseApp.database().ref(path).off();
    dispatch(paths_actions_unWatch(location));
    dispatch(paths_actions_destroy(location));
  };
}

function unwatchAllPaths(firebaseApp) {
  return function (dispatch, getState) {
    var allPaths = getAllPaths(getState());

    Object.keys(allPaths).forEach(function (key, index) {
      firebaseApp.database().ref(allPaths[index]).off();
      dispatch(paths_actions_unWatch(key));
    });
  };
}
// CONCATENATED MODULE: ./src/store/loadings/selectors.js
function isLoading(state, location) {
  if (state.loadings !== undefined && state.loadings[location]) {
    return state.loadings[location];
  }

  return false;
}
// CONCATENATED MODULE: ./src/store/errors/selectors.js
function hasError(state, path) {
  if (state.errors !== undefined && state.errors[path]) {
    return state.errors[path];
  }

  return false;
}
// CONCATENATED MODULE: ./src/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "clearInitialization", function() { return clearInitialization; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "authReducer", function() { return auth; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "collectionsReducer", function() { return collections; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "connectionReducer", function() { return connection; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "docsReducer", function() { return docs; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "errorsReducer", function() { return errors; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "initializationReducer", function() { return initialization; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "listsReducer", function() { return lists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "loadingsReducer", function() { return loadings; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "messagingReducer", function() { return messaging; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "pathsReducer", function() { return paths; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "initConnection", function() { return initConnection; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unsubscribeConnection", function() { return unsubscribeConnection; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "initMessaging", function() { return initMessaging; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "clearMessage", function() { return clearMessage; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "logError", function() { return logError; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "clearError", function() { return clearError; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "clearAllErrors", function() { return clearAllErrors; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "logLoading", function() { return logLoading; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "clearLoading", function() { return clearLoading; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "clearAllLoadings", function() { return clearAllLoadings; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "watchAuth", function() { return watchAuth; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "authStateChanged", function() { return authStateChanged; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "authError", function() { return authError; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "watchCol", function() { return watchCol; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchCol", function() { return unwatchCol; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "destroyCol", function() { return destroyCol; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchAllCols", function() { return unwatchAllCols; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "watchDoc", function() { return watchDoc; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchDoc", function() { return unwatchDoc; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "destroyDoc", function() { return destroyDoc; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchAllDocs", function() { return unwatchAllDocs; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "watchList", function() { return watchList; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchList", function() { return unwatchList; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "destroyList", function() { return destroyList; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchAllLists", function() { return unwatchAllLists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "watchPath", function() { return watchPath; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchPath", function() { return unwatchPath; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "destroyPath", function() { return destroyPath; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "unwatchAllPaths", function() { return unwatchAllPaths; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getList", function() { return getList; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getAllLists", function() { return getAllLists; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "isLoading", function() { return isLoading; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "hasError", function() { return hasError; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getCol", function() { return getCol; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getAllCols", function() { return getAllCols; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getAllInitializations", function() { return getAllInitializations; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getPath", function() { return selectors_getPath; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getAllPaths", function() { return getAllPaths; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getDoc", function() { return getDoc; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "getAllDocs", function() { return getAllDocs; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "isInitialised", function() { return isInitialised; });











var firekitReducers = {
  auth: auth,
  collections: collections,
  connection: connection,
  docs: docs,
  errors: errors,
  initialization: initialization,
  lists: lists,
  loadings: loadings,
  messaging: messaging,
  paths: paths
};






























/* harmony default export */ var src = __webpack_exports__["default"] = (firekitReducers);

/***/ })
/******/ ])["default"];
});