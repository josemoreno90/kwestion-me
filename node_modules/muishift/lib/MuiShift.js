'use strict';

exports.__esModule = true;
exports.MuiShift = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _downshift = require('downshift');

var _downshift2 = _interopRequireDefault(_downshift);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _matchSorter = require('match-sorter');

var _matchSorter2 = _interopRequireDefault(_matchSorter);

var _styles = require('@material-ui/core/styles');

var _TextField = require('@material-ui/core/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Paper = require('@material-ui/core/Paper');

var _Paper2 = _interopRequireDefault(_Paper);

var _MenuItem = require('@material-ui/core/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _zIndex = require('@material-ui/core/styles/zIndex');

var _zIndex2 = _interopRequireDefault(_zIndex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _itemToString = function _itemToString(item) {
  return item || '';
};

var _getSelectedItem = function _getSelectedItem(input) {
  return input ? input.value : '';
};

var _renderInput = function _renderInput(_ref) {
  var rootProps = _ref.rootProps,
      downshiftProps = _ref.downshiftProps;
  var getInputProps = downshiftProps.getInputProps;
  var inputProps = rootProps.inputProps;


  return _react2.default.createElement(_TextField2.default, _extends({
    InputProps: _extends({}, getInputProps())
  }, inputProps));
};

var _matchSorterProps = {
  maxRanking: _matchSorter2.default.rankings.STARTS_WITH
};

var _renderSuggestion = function _renderSuggestion(_ref2) {
  var rootProps = _ref2.rootProps,
      downshiftProps = _ref2.downshiftProps,
      suggestion = _ref2.suggestion,
      index = _ref2.index;
  var itemToString = rootProps.itemToString;
  var highlightedIndex = downshiftProps.highlightedIndex,
      getItemProps = downshiftProps.getItemProps,
      selectedItem = downshiftProps.selectedItem;

  var itemProps = getItemProps({ item: suggestion });
  var isHighlighted = highlightedIndex === index;
  var itemString = itemToString(suggestion) || '';
  var isSelected = suggestion === selectedItem;

  return _react2.default.createElement(
    _MenuItem2.default,
    _extends({}, itemProps, {
      key: index,
      selected: isHighlighted,
      style: {
        fontWeight: isSelected ? 500 : 400
      }
    }),
    itemString
  );
};

var _getKeys = function _getKeys(obj, prefix) {
  var keys = [];
  if (obj == null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return keys;

  Object.keys(obj).forEach(function (key) {
    if (_typeof(obj[key]) === 'object') {
      keys = keys.concat(_getKeys(obj[key], prefix != null ? prefix + '.' + key : key));
    }
    keys.push(prefix != null ? prefix + '.' + key : key);
  });

  return keys;
};

var _getFilteredItems = function _getFilteredItems(_ref3) {
  var rootProps = _ref3.rootProps,
      downshiftProps = _ref3.downshiftProps;
  var items = rootProps.items,
      itemToString = rootProps.itemToString,
      matchSorterProps = rootProps.matchSorterProps;
  var selectedItem = downshiftProps.selectedItem,
      inputValue = downshiftProps.inputValue;

  var isTyping = itemToString(selectedItem) !== inputValue;
  var keys = [];

  //gets keys recusively
  if (items != null && items.length) {
    keys = _getKeys(items[0]);
  }

  return !isTyping ? items : (0, _matchSorter2.default)(items, inputValue, _extends({
    keys: keys
  }, matchSorterProps));
};

var _renderMenu = function _renderMenu(_ref4) {
  var rootProps = _ref4.rootProps,
      downshiftProps = _ref4.downshiftProps,
      filteredItems = _ref4.filteredItems;
  var classes = rootProps.classes,
      renderSuggestion = rootProps.renderSuggestion;


  return _react2.default.createElement(
    _Paper2.default,
    { className: classes.paper, square: true },
    filteredItems.map(function (suggestion, index) {
      return renderSuggestion({
        rootProps: rootProps,
        downshiftProps: downshiftProps,
        suggestion: suggestion,
        index: index
      });
    })
  );
};

var MuiShift = exports.MuiShift = function MuiShift(rootProps) {
  var input = rootProps.input,
      classes = rootProps.classes,
      getFilteredItems = rootProps.getFilteredItems,
      renderInput = rootProps.renderInput,
      renderMenu = rootProps.renderMenu,
      itemToString = rootProps.itemToString;


  return _react2.default.createElement(
    _downshift2.default,
    _extends({}, input, {
      itemToString: itemToString,
      selectedItem: input ? input.value : undefined
    }, rootProps),
    function (downshiftProps) {
      var isOpen = downshiftProps.isOpen;

      var filteredItems = getFilteredItems({ rootProps: rootProps, downshiftProps: downshiftProps });

      return _react2.default.createElement(
        'div',
        { className: classes.container },
        renderInput({ rootProps: rootProps, downshiftProps: downshiftProps }),
        isOpen && !!filteredItems.length && renderMenu({ rootProps: rootProps, downshiftProps: downshiftProps, filteredItems: filteredItems })
      );
    }
  );
};

var styles = function styles(theme) {
  return {

    container: {
      flexGrow: 1,
      position: 'relative'
    },
    paper: {
      position: 'absolute',
      marginTop: theme.spacing.unit,
      left: 0,
      right: 0,
      zIndex: _zIndex2.default.modal
    },
    chip: {
      margin: theme.spacing.unit / 2 + 'px ' + theme.spacing.unit / 4 + 'px'
    },
    closeButton: {
      '&:hover': {
        color: theme.palette.secondary.main
      }
    }
  };
};

MuiShift.defaultProps = {
  getSelectedItem: _getSelectedItem,
  getFilteredItems: _getFilteredItems,
  renderSuggestion: _renderSuggestion,
  renderInput: _renderInput,
  itemToString: _itemToString,
  renderMenu: _renderMenu,
  matchSorterProps: _matchSorterProps
};

exports.default = (0, _styles.withStyles)(styles)(MuiShift);