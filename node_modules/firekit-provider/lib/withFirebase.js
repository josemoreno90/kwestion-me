'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _firekit = require('firekit');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var withFirebase = function withFirebase(Component) {
  var ChildComponent = function ChildComponent(props, context) {
    var firebaseApp = context.firebaseApp,
        store = context.store;
    var dispatch = store.dispatch;


    return _react2.default.createElement(Component, _extends({
      dispatch: dispatch,
      firebaseApp: firebaseApp,

      watchAuth: function watchAuth(onAuthStateChanged, onAuthError) {
        dispatch((0, _firekit.watchAuth)(firebaseApp, onAuthStateChanged, onAuthError));
      },

      clearInitialization: function clearInitialization() {
        dispatch((0, _firekit.clearInitialization)());
      },

      authStateChanged: function authStateChanged(user) {
        dispatch((0, _firekit.authStateChanged)(user));
      },
      authError: function authError(error) {
        dispatch((0, _firekit.authError)(error));
      },

      watchConnection: function watchConnection(onChange) {
        dispatch((0, _firekit.initConnection)(firebaseApp, onChange));
      },
      unwatchConnection: function unwatchConnection() {
        dispatch((0, _firekit.unsubscribeConnection)(firebaseApp));
      },

      watchList: function watchList(path, alias, append) {
        dispatch((0, _firekit.watchList)(firebaseApp, path, alias, append));
      },
      unwatchList: function unwatchList(path, alias) {
        dispatch((0, _firekit.unwatchList)(firebaseApp, path, alias));
      },
      destroyList: function destroyList(path, alias) {
        dispatch((0, _firekit.destroyList)(firebaseApp, path, alias));
      },
      unwatchAllLists: function unwatchAllLists() {
        dispatch((0, _firekit.unwatchAllLists)(firebaseApp));
      },

      watchCol: function watchCol(path, alias, append) {
        dispatch((0, _firekit.watchCol)(firebaseApp, path, alias, append));
      },
      unwatchCol: function unwatchCol(path, alias) {
        dispatch((0, _firekit.unwatchCol)(firebaseApp, path, alias));
      },
      destroyCol: function destroyCol(path, alias) {
        dispatch((0, _firekit.destroyCol)(firebaseApp, path, alias));
      },
      unwatchAllCols: function unwatchAllCols() {
        dispatch((0, _firekit.unwatchAllCols)(firebaseApp));
      },

      watchPath: function watchPath(path, alias, logLoading) {
        dispatch((0, _firekit.watchPath)(firebaseApp, path, alias, logLoading));
      },
      unwatchPath: function unwatchPath(path, alias) {
        dispatch((0, _firekit.unwatchPath)(firebaseApp, path, alias));
      },
      destroyPath: function destroyPath(path, alias) {
        dispatch((0, _firekit.destroyPath)(firebaseApp, path, alias));
      },
      unwatchAllPaths: function unwatchAllPaths() {
        dispatch((0, _firekit.unwatchAllPaths)(firebaseApp));
      },

      watchDoc: function watchDoc(path, alias) {
        dispatch((0, _firekit.watchDoc)(firebaseApp, path, alias));
      },
      unwatchDoc: function unwatchDoc(path, alias) {
        dispatch((0, _firekit.unwatchDoc)(firebaseApp, path, alias));
      },
      destroyDoc: function destroyDoc(path, alias) {
        dispatch((0, _firekit.destroyDoc)(firebaseApp, path, alias));
      },
      unwatchAllDocs: function unwatchAllDocs() {
        dispatch((0, _firekit.unwatchAllDocs)(firebaseApp));
      },

      clearApp: function clearApp() {
        dispatch((0, _firekit.unwatchAllLists)(firebaseApp));
        dispatch((0, _firekit.unwatchAllPaths)(firebaseApp));
        dispatch((0, _firekit.unwatchAllDocs)(firebaseApp));
        dispatch((0, _firekit.unwatchAllCols)(firebaseApp));
        dispatch((0, _firekit.unsubscribeConnection)(firebaseApp));
      },

      initMessaging: function initMessaging(handleTokenChange, onMessageReceieved) {
        dispatch((0, _firekit.initMessaging)(firebaseApp, handleTokenChange, onMessageReceieved));
      },
      clearMessage: function clearMessage() {
        dispatch((0, _firekit.clearMessage)());
      }

    }, props));
  };

  ChildComponent.contextTypes = {
    firebaseApp: _propTypes2.default.object.isRequired,
    store: _propTypes2.default.object.isRequired
  };

  return ChildComponent;
};

exports.default = withFirebase;
module.exports = exports['default'];