'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _AppBar = require('@material-ui/core/AppBar');

var _AppBar2 = _interopRequireDefault(_AppBar);

var _Icon = require('@material-ui/core/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _LinearProgress = require('@material-ui/core/LinearProgress');

var _LinearProgress2 = _interopRequireDefault(_LinearProgress);

var _Menu = require('@material-ui/icons/Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Toolbar = require('@material-ui/core/Toolbar');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _Typography = require('@material-ui/core/Typography');

var _Typography2 = _interopRequireDefault(_Typography);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _actions = require('../../store/drawer/actions');

var _actions2 = _interopRequireDefault(_actions);

var _withWidth = require('@material-ui/core/withWidth');

var _withWidth2 = _interopRequireDefault(_withWidth);

var _reactHelmet = require('react-helmet');

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _reactIntl = require('react-intl');

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var drawerWidth = 240;

var styles = function styles(theme) {
  return {
    root: {
      display: 'flex',
      flexDirection: 'column',
      height: '100vh'
    },
    appBar: {
      zIndex: theme.zIndex.drawer + 1,
      transition: theme.transitions.create(['width', 'margin'], {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen
      })
    },
    menuButton: {
      marginLeft: 12,
      marginRight: 12
    },
    toolbar: _extends({
      alignItems: 'center',
      justifyContent: 'flex-end'
    }, theme.mixins.toolbar),
    content: {
      flex: 1,
      backgroundColor: theme.palette.background.default
    },

    appBarShift: {
      //marginLeft: drawerWidth,
      width: 'calc(100% - ' + drawerWidth + 'px)',
      transition: theme.transitions.create(['width', 'margin'], {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.enteringScreen
      })
    },
    hide: {
      display: 'none'
    },
    grow: {
      flex: '1 1 auto'
    }
  };
};

var Activity = function (_React$Component) {
  _inherits(Activity, _React$Component);

  function Activity() {
    var _temp, _this, _ret;

    _classCallCheck(this, Activity);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleDrawerToggle = function () {
      var _this$props = _this.props,
          setDrawerMobileOpen = _this$props.setDrawerMobileOpen,
          drawer = _this$props.drawer;

      setDrawerMobileOpen(!drawer.mobileOpen);
    }, _this.handleDrawerOpen = function () {
      var setDrawerOpen = _this.props.setDrawerOpen;

      setDrawerOpen(true);
    }, _this.handleDrawerClose = function () {
      var setDrawerOpen = _this.props.setDrawerOpen;

      setDrawerOpen(false);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Activity.prototype.render = function render() {
    var _props = this.props,
        classes = _props.classes,
        theme = _props.theme,
        children = _props.children,
        drawer = _props.drawer,
        intl = _props.intl,
        title = _props.title,
        pageTitle = _props.pageTitle,
        width = _props.width,
        appBarContent = _props.appBarContent,
        isLoading = _props.isLoading,
        onBackClick = _props.onBackClick,
        isOffline = _props.isOffline;


    var headerTitle = '';

    if (typeof title === 'string' || title instanceof String) {
      headerTitle = title;
    }

    if (pageTitle) {
      headerTitle = pageTitle;
    }

    //const smDown = width === 'sm' || width === 'xs'
    var smDown = (0, _withWidth.isWidthDown)('sm', width);

    return _react2.default.createElement(
      'div',
      { className: classes.root },
      _react2.default.createElement(
        _reactHelmet.Helmet,
        null,
        _react2.default.createElement('meta', { name: 'theme-color', content: theme.palette.primary.main }),
        _react2.default.createElement('meta', { name: 'apple-mobile-web-app-status-bar-style', content: theme.palette.primary.main }),
        _react2.default.createElement('meta', { name: 'msapplication-navbutton-color', content: theme.palette.primary.main }),
        _react2.default.createElement(
          'title',
          null,
          headerTitle
        )
      ),
      _react2.default.createElement(
        _AppBar2.default,
        {
          position: width !== 'sm' && width !== 'xs' ? 'absolute' : undefined,
          className: width !== 'sm' && width !== 'xs' ? (0, _classnames2.default)(classes.appBar, drawer.open && classes.appBarShift) : classes.appBar
        },
        _react2.default.createElement(
          _Toolbar2.default,
          { disableGutters: true },
          true && _react2.default.createElement(_LinearProgress2.default, null),
          _react2.default.createElement(
            _IconButton2.default,
            {
              color: 'inherit',
              'aria-label': 'open drawer',
              onClick: !drawer.open ? this.handleDrawerOpen : this.handleDrawerToggle,
              className: (0, _classnames2.default)(!smDown && classes.menuButton, drawer.open && !smDown && classes.hide, onBackClick && classes.hide)
            },
            _react2.default.createElement(_Menu2.default, null)
          ),
          _react2.default.createElement(
            _IconButton2.default,
            {
              color: 'inherit',
              'aria-label': 'open drawer',
              onClick: onBackClick,
              className: (0, _classnames2.default)(!smDown && classes.menuButton, !onBackClick && classes.hide)
            },
            _react2.default.createElement(
              _Icon2.default,
              null,
              'chevron_left'
            )
          ),
          !onBackClick && drawer.open && _react2.default.createElement('div', { style: { marginRight: 32 } }),
          _react2.default.createElement(
            _Typography2.default,
            { variant: 'title', color: 'inherit', noWrap: true },
            headerTitle
          ),
          _react2.default.createElement('div', { className: classes.grow }),
          appBarContent
        )
      ),
      _react2.default.createElement('div', { className: classes.toolbar }),
      isLoading && _react2.default.createElement(_LinearProgress2.default, null),
      isOffline && _react2.default.createElement(
        'div',
        {
          style: {
            display: 'flex',
            justifyContent: 'center',
            width: '100%',
            height: 15,
            backgroundColor: theme.palette.secondary.main
          }
        },
        _react2.default.createElement(
          _Typography2.default,
          { variant: 'caption', color: 'textSecondary', noWrap: true },
          intl.formatMessage({ id: 'offline' })
        )
      ),
      _react2.default.createElement(
        'main',
        { className: classes.content },
        children
      )
    );
  };

  return Activity;
}(_react2.default.Component);

Activity.propTypes = process.env.NODE_ENV !== "production" ? {
  classes: _propTypes2.default.object.isRequired,
  theme: _propTypes2.default.object.isRequired,
  drawer: _propTypes2.default.object.isRequired
} : {};

var mapStateToProps = function mapStateToProps(state) {
  var drawer = state.drawer,
      connection = state.connection;


  return {
    drawer: drawer,
    isOffline: connection ? !connection.isConnected : false
  };
};

exports.default = (0, _redux.compose)((0, _reactRedux.connect)(mapStateToProps, _extends({}, _actions2.default)), (0, _withWidth2.default)(), (0, _styles.withStyles)(styles, { withTheme: true }), _reactIntl.injectIntl)(Activity);
module.exports = exports['default'];