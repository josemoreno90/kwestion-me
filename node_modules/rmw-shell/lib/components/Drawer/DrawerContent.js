'use strict';

exports.__esModule = true;
exports.DrawerContent = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SelectableMenuList = require('../../containers/SelectableMenuList');

var _SelectableMenuList2 = _interopRequireDefault(_SelectableMenuList);

var _withAppConfigs = require('../../utils/withAppConfigs');

var _withAppConfigs2 = _interopRequireDefault(_withAppConfigs);

var _redux = require('redux');

var _reactIntl = require('react-intl');

var _a2hs = require('a2hs');

var _reactRouterDom = require('react-router-dom');

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DrawerContent = exports.DrawerContent = function DrawerContent(props) {
  var appConfig = props.appConfig,
      dialogs = props.dialogs,
      match = props.match,
      messaging = props.messaging,
      drawer = props.drawer;


  var handleChange = function handleChange(event, index) {
    var history = props.history,
        setDrawerMobileOpen = props.setDrawerMobileOpen;


    if (index !== undefined) {
      setDrawerMobileOpen(false);
    }

    if (index !== undefined && index !== Object(index)) {
      history.push(index);
    }
  };

  var handleSignOut = function handleSignOut() {
    var userLogout = props.userLogout,
        setDialogIsOpen = props.setDialogIsOpen,
        appConfig = props.appConfig,
        setDrawerOpen = props.setDrawerOpen;


    appConfig.firebaseLoad().then(function (_ref) {
      var firebaseApp = _ref.firebaseApp;

      firebaseApp.database().ref('users/' + firebaseApp.auth().currentUser.uid + '/connections').remove();
      firebaseApp.database().ref('users/' + firebaseApp.auth().currentUser.uid + '/notificationTokens/' + messaging.token).remove();
      firebaseApp.database().ref('users/' + firebaseApp.auth().currentUser.uid + '/lastOnline').set(new Date());
      firebaseApp.auth().signOut().then(function () {
        userLogout();
        setDrawerOpen(false);
        setDialogIsOpen('auth_menu', false);
      });
    });
  };

  var menuItems = appConfig.getMenuItems(_extends({}, props, { isAuthMenu: !!dialogs.auth_menu, handleSignOut: handleSignOut }));

  return _react2.default.createElement(
    'div',
    {
      style: {
        display: 'flex',
        flexDirection: 'column'
      }
    },
    _react2.default.createElement(_SelectableMenuList2.default, {
      items: menuItems,
      onIndexChange: handleChange,
      index: match ? match.path : '/',
      useMinified: drawer.useMinified && !drawer.open
    })
  );
};

exports.default = (0, _redux.compose)(_a2hs.withA2HS, _reactIntl.injectIntl, _reactRouterDom.withRouter, _withAppConfigs2.default, (0, _styles.withTheme)())(DrawerContent);