'use strict';

exports.__esModule = true;
exports.default = requestNotificationPermission;
exports.initializeMessaging = initializeMessaging;
exports.handleMessageReceived = handleMessageReceived;
exports.handleTokenChange = handleTokenChange;
exports.getNotification = getNotification;
exports.createNotifgication = createNotifgication;
exports.checkForUpdate = checkForUpdate;
exports.handleUpdate = handleUpdate;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactToastify = require('react-toastify');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Button = require('@material-ui/core/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Icon = require('@material-ui/core/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _ListItem = require('@material-ui/core/ListItem');

var _ListItem2 = _interopRequireDefault(_ListItem);

var _ListItemText = require('@material-ui/core/ListItemText');

var _ListItemText2 = _interopRequireDefault(_ListItemText);

var _Avatar = require('@material-ui/core/Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _ListItemIcon = require('@material-ui/core/ListItemIcon');

var _ListItemIcon2 = _interopRequireDefault(_ListItemIcon);

var _Update = require('@material-ui/icons/Update');

var _Update2 = _interopRequireDefault(_Update);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var updateMessageShown = false;

function requestNotificationPermission(props) {
  var auth = props.auth,
      notificationPermissionRequested = props.notificationPermissionRequested,
      setPersistentValue = props.setPersistentValue,
      simpleValues = props.simpleValues,
      setSimpleValue = props.setSimpleValue,
      messaging = props.messaging,
      intl = props.intl,
      appConfig = props.appConfig;


  var reengagingHours = appConfig.notificationsReengagingHours ? appConfig.notificationsReengagingHours : 48;
  var requestNotificationPermission = notificationPermissionRequested ? (0, _moment2.default)().diff(notificationPermissionRequested, 'hours') > reengagingHours : true;

  if ('Notification' in window && window.Notification.permission !== 'granted' && auth.uid && requestNotificationPermission && !simpleValues['notificationPermissionShown']) {
    setSimpleValue('notificationPermissionShown', true);
    _reactToastify.toast.info(function (_ref) {
      var closeToast = _ref.closeToast;
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: { display: 'flex', alignItems: 'center', padding: 8 } },
          _react2.default.createElement(
            _Icon2.default,
            { style: { paddingRight: 8 }, className: 'material-icons', color: 'secondary' },
            ' ',
            'notifications',
            ' '
          ),
          _react2.default.createElement(
            'div',
            { style: { padding: undefined } },
            intl.formatMessage({ id: 'enable_notifications_message' })
          )
        ),
        _react2.default.createElement(
          'div',
          { style: { display: 'flex', alignItems: 'center', justifyContent: 'flex-end' } },
          _react2.default.createElement(
            _Button2.default,
            {
              color: 'primary',
              onClick: function onClick() {
                setPersistentValue('notificationPermissionRequested', (0, _moment2.default)());
                initializeMessaging(props);
                closeToast();
              }
            },
            intl.formatMessage({ id: 'enable' })
          ),
          _react2.default.createElement(
            _Button2.default,
            {
              color: 'secondary',
              onClick: function onClick() {
                setPersistentValue('notificationPermissionRequested', (0, _moment2.default)());
                closeToast();
              }
            },
            intl.formatMessage({ id: 'no_thanks' })
          )
        )
      );
    }, { position: _reactToastify.toast.POSITION.TOP_CENTER, autoClose: false, closeButton: false, closeOnClick: false });
  } else if ('Notification' in window && Notification.permission === 'granted' && auth.uid && !messaging.isInitialized) {
    // initializeMessaging(props)
  }
}

function initializeMessaging(props) {
  var skipIfNoPermission = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var initMessaging = props.initMessaging,
      firebaseApp = props.firebaseApp,
      auth = props.auth;


  firebaseApp.database().ref('disable_notifications/' + auth.uid).once('value', function (snap) {
    if (snap.val()) {
      console.log('Notifications disabled by user');
    } else if (skipIfNoPermission && 'Notification' in window && Notification.permission !== 'granted') {
      console.log('No permissions for Notifications');
    } else {
      console.log('Notifications initialized');
      initMessaging(firebaseApp, function (token) {
        handleTokenChange(props, token);
      }, function (payload) {
        handleMessageReceived(props, payload);
      });
    }
  });
}

function handleMessageReceived(props, payload) {
  var location = props.location,
      appConfig = props.appConfig;

  var notification = payload.notification;
  var pathname = location ? location.pathname : '';
  var tag = payload.notification ? payload.notification.tag : '';
  var notifications = appConfig.getNotifications(notification, props);
  var notificationData = notifications[tag] ? notifications[tag] : false;

  if (notificationData && pathname.indexOf(notificationData.path) === -1) {
    _reactToastify.toast.info(function (_ref2) {
      var closeToast = _ref2.closeToast;
      return getNotification(notificationData, closeToast);
    }, {
      position: _reactToastify.toast.POSITION.BOTTOM_RIGHT,
      autoClose: notificationData.autoClose ? notificationData.autoClose : false
    });
  } else {
    _reactToastify.toast.info(function (_ref3) {
      var closeToast = _ref3.closeToast;
      return getNotification(notification, closeToast);
    }, {
      position: _reactToastify.toast.POSITION.BOTTOM_RIGHT
    });
  }
}

function handleTokenChange(props, token) {
  var firebaseApp = props.firebaseApp,
      auth = props.auth;


  firebaseApp.database().ref('notification_tokens/' + auth.uid + '/' + token).set(true);
}

function getNotification(notification, closeToast) {
  if (notification.getNotification) {
    return notification.getNotification(notification, closeToast);
  }

  return createNotifgication(notification, closeToast);
}

function createNotifgication(notification, closeToast) {
  return _react2.default.createElement(
    'div',
    {
      onClick: function onClick() {
        notification.onClick();
      }
    },
    _react2.default.createElement(
      _ListItem2.default,
      null,
      _react2.default.createElement(_Avatar2.default, { src: notification.icon }),
      _react2.default.createElement(_ListItemText2.default, { primary: notification.title, secondary: notification.body })
    )
  );
}

function checkForUpdate(intl) {
  var title = intl ? intl.formatMessage({ id: 'update_title' }) : 'Update available!';
  var message = intl ? intl.formatMessage({ id: 'update_message' }) : 'Click here to get the new version.';

  if (window.updateAvailable && !updateMessageShown) {
    updateMessageShown = true;
    _reactToastify.toast.info(function (_ref4) {
      var closeToast = _ref4.closeToast;
      return _react2.default.createElement(
        'div',
        {
          onClick: function onClick() {
            handleUpdate();
          }
        },
        _react2.default.createElement(
          _ListItem2.default,
          { button: true },
          _react2.default.createElement(
            _ListItemIcon2.default,
            null,
            _react2.default.createElement(_Update2.default, null)
          ),
          _react2.default.createElement(_ListItemText2.default, { primary: title, secondary: message })
        )
      );
    }, {
      position: _reactToastify.toast.POSITION.BOTTOM_CENTER,
      autoClose: false
    });
  }
}

function handleUpdate() {
  window.updateAvailable = false;
  window.location.href = window.location.href;
}