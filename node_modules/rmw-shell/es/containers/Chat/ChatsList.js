function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Activity from '../../containers/Activity';
import Avatar from '@material-ui/core/Avatar';
import Button from '@material-ui/core/Button';
import Divider from '@material-ui/core/Divider';
import Icon from '@material-ui/core/Icon';
import IconButton from '@material-ui/core/IconButton';
import IconMenu from '../../containers/IconMenu';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import MoreHorizIcon from '@material-ui/icons/MoreHoriz';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import ReactList from 'react-list';
import Scrollbar from '../../components/Scrollbar';
import Typography from '@material-ui/core/Typography';
import requestNotificationPermission from '../../utils/messaging';
import withAppConfigs from '../../utils/withAppConfigs';
import withWidth, { isWidthUp } from '@material-ui/core/withWidth';
import { connect } from 'react-redux';
import { filterSelectors } from 'material-ui-filter';
import { getList } from 'firekit';
import { injectIntl, intlShape } from 'react-intl';
import { setPersistentValue } from '../../store/persistentValues/actions';
import { withFirebase } from 'firekit-provider';
import { withRouter } from 'react-router-dom';
import { withTheme, withStyles } from '@material-ui/core/styles';

export var Chats = function (_Component) {
  _inherits(Chats, _Component);

  function Chats() {
    var _temp, _this, _ret;

    _classCallCheck(this, Chats);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      anchorEl: null,
      hasError: false
    }, _this.handleClick = function (event) {
      _this.setState({ anchorEl: event.currentTarget });
    }, _this.handleClose = function () {
      _this.setState({ anchorEl: null });
    }, _this.handleDeleteChat = function (key, val) {
      var _this$props = _this.props,
          firebaseApp = _this$props.firebaseApp,
          auth = _this$props.auth;


      firebaseApp.database().ref('user_chats/' + auth.uid + '/' + key).remove();
    }, _this.handleMarkAsUnread = function (key, val) {
      var _this$props2 = _this.props,
          firebaseApp = _this$props2.firebaseApp,
          auth = _this$props2.auth;


      firebaseApp.database().ref('user_chats/' + auth.uid + '/' + key + '/unread').set(1);
    }, _this.handleItemClick = function (val, key) {
      var _this$props3 = _this.props,
          width = _this$props3.width,
          history = _this$props3.history,
          setPersistentValue = _this$props3.setPersistentValue,
          firebaseApp = _this$props3.firebaseApp,
          auth = _this$props3.auth;


      var usePreview = isWidthUp('sm', width);
      setPersistentValue('current_chat_name', val.displayName);

      history.push('/chats/edit/' + key);
    }, _this.renderIcons = function (val) {
      var _this$props4 = _this.props,
          theme = _this$props4.theme,
          auth = _this$props4.auth;


      return React.createElement(
        'div',
        null,
        val.isSend && auth.uid === val.authorUid && React.createElement(
          Icon,
          { className: 'material-icons', style: {
              fontSize: 14,
              padding: 0,
              paddingRight: 2,
              bottom: -1,
              color: val.isRead ? theme.palette.accent1Color : theme.palette.secondary1Color
            } },
          val.isReceived ? 'done_all' : 'done'
        ),
        val.unread > 0 && React.createElement(
          'b',
          null,
          val.lastMessage
        ),
        !val.unread && val.lastMessage
      );
    }, _this.renderItem = function (i, k) {
      var _this$props5 = _this.props,
          list = _this$props5.list,
          intl = _this$props5.intl,
          persistentValues = _this$props5.persistentValues,
          width = _this$props5.width,
          theme = _this$props5.theme;


      var usePreview = isWidthUp('sm', width);
      var currentChatUid = persistentValues['current_chat_uid'] ? persistentValues['current_chat_uid'] : '';
      var key = list[i].key;
      var val = list[i].val;
      var isPreviewed = usePreview && currentChatUid === key;

      var options = [{
        text: intl.formatMessage({ id: 'delete_chat' }),
        onClick: function onClick() {
          _this.handleDeleteChat(key, val);
        },
        icon: React.createElement(
          Icon,
          null,
          'delete'
        )
      }, {
        text: intl.formatMessage({ id: 'mark_chat_as_unread' }),
        onClick: function onClick() {
          _this.handleMarkAsUnread(key, val);
        },
        icon: React.createElement(
          Icon,
          null,
          'history'
        )
      }];

      return React.createElement(
        'div',
        { key: i },
        React.createElement(
          ListItem,
          {
            selected: currentChatUid === key,
            key: i,
            onClick: function onClick() {
              _this.handleItemClick(val, key);
            },
            id: i },
          val.photoURL && React.createElement(Avatar, { src: val.photoURL, alt: 'person' }),
          !val.photoURL && React.createElement(
            Avatar,
            null,
            ' ',
            React.createElement(
              Icon,
              null,
              ' person '
            ),
            '  '
          ),
          React.createElement(ListItemText, {
            primaryTypographyProps: {
              color: val.unread ? 'secondary' : undefined
            },
            primary: val.unread > 0 ? React.createElement(
              'div',
              null,
              React.createElement(
                'b',
                null,
                val.displayName
              )
            ) : val.displayName,
            secondary: _this.renderIcons(val)
          }),
          React.createElement(
            ListItemSecondaryAction,
            { style: { paddingTop: 24 } },
            React.createElement(
              Typography,
              { variant: 'caption', style: { paddingRight: 12 } },
              val.lastCreated ? intl.formatTime(new Date(val.lastCreated), 'hh:mm') : undefined
            )
          ),
          React.createElement(
            ListItemSecondaryAction,
            { style: { paddingBottom: 24 } },
            React.createElement(
              Typography,
              { component: 'div' },
              React.createElement(IconMenu, {
                options: options,
                iconName: 'more_horiz'
              })
            )
          )
        ),
        React.createElement(Divider, { inset: true })
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Chats.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        watchList = _props.watchList,
        path = _props.path;

    watchList(path);

    //requestNotificationPermission(this.props)
  };

  Chats.prototype.componentDidCatch = function componentDidCatch(error, info) {
    // Display fallback UI
    this.setState({ hasError: true });
    // You can also log the error to an error reporting service
    //logErrorToMyService(error, info);
  };

  Chats.prototype.render = function render() {
    var _props2 = this.props,
        intl = _props2.intl,
        list = _props2.list,
        history = _props2.history,
        persistentValues = _props2.persistentValues,
        auth = _props2.auth,
        width = _props2.width,
        uid = _props2.uid;


    if (this.state.hasError) {
      // You can render any custom fallback UI
      return React.createElement(
        'h1',
        null,
        'Something went wrong.'
      );
    }
    var path = 'user_chats/' + auth.uid;
    var currentChatUid = uid; //persistentValues['current_chat_uid'] ? persistentValues['current_chat_uid'] : ''
    var usePreview = isWidthUp('sm', width);
    var isDisplayingMessages = usePreview && currentChatUid;

    return React.createElement(
      'div',
      { style: { width: '100%', maxWidth: usePreview ? 300 : undefined, height: '100%' } },
      React.createElement(
        Scrollbar,
        null,
        React.createElement(
          List,
          { style: { padding: 0, height: '100%', width: '100%', maxWidth: usePreview ? 300 : undefined } },
          React.createElement(ReactList, {
            style: { maxWidth: 300 },
            itemRenderer: this.renderItem,
            length: list ? list.length : 0,
            type: 'simple'
          })
        )
      ),
      React.createElement(
        'div',
        { style: { position: 'absolute', width: usePreview ? 300 : '100%', bottom: 5 } },
        React.createElement(
          Button,
          {
            variant: 'fab',
            color: 'secondary',
            onClick: function onClick() {
              history.push('/chats/create');
            },
            style: { position: 'absolute', right: 20, bottom: 10, zIndex: 99 }
          },
          React.createElement(
            Icon,
            { className: 'material-icons' },
            'chat'
          )
        )
      )
    );
  };

  return Chats;
}(Component);

Chats.propTypes = process.env.NODE_ENV !== "production" ? {
  list: PropTypes.array.isRequired,
  history: PropTypes.object,
  intl: intlShape
} : {};

var mapStateToProps = function mapStateToProps(state, ownPops) {
  var lists = state.lists,
      auth = state.auth,
      persistentValues = state.persistentValues;
  var match = ownPops.match;

  var uid = match.params.uid;

  var path = 'user_chats/' + auth.uid;
  var list = getList(state, path).sort(filterSelectors.dynamicSort('lastCreated', false, function (fieldValue) {
    return fieldValue.val;
  }));

  return {
    uid: uid,
    auth: auth,
    path: path,
    persistentValues: persistentValues,
    list: list
  };
};

export default connect(mapStateToProps, { setPersistentValue: setPersistentValue })(injectIntl(withFirebase(withAppConfigs(withRouter(withWidth()(withTheme()(withStyles(function (theme) {}, { withTheme: true })(Chats))))))));