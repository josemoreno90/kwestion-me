function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import Scrollbar from '../../components/Scrollbar';
import withAppConfigs from '../../utils/withAppConfigs';
import DrawerContent from './DrawerContent';
import DrawerHeader from './DrawerHeader';
import ResponsiveDrawer from '../../containers/ResponsiveDrawer';
import { withRouter } from 'react-router-dom';

export var AppLayout = function (_Component) {
  _inherits(AppLayout, _Component);

  function AppLayout() {
    _classCallCheck(this, AppLayout);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  AppLayout.prototype.render = function render() {
    var _props = this.props,
        history = _props.history,
        appConfig = _props.appConfig;


    var path = history.location.pathname;
    var Header = appConfig.drawerHeader ? appConfig.drawerHeader : DrawerHeader;

    return React.createElement(
      ResponsiveDrawer,
      null,
      React.createElement(Header, null),
      React.createElement(
        Scrollbar,
        null,
        React.createElement(DrawerContent, { path: path, history: history })
      )
    );
  };

  return AppLayout;
}(Component);

export default withRouter(withAppConfigs(AppLayout));