function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Icon from '@material-ui/core/Icon';
import IconButton from '@material-ui/core/IconButton';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import React from 'react';

var IconMenu = function (_React$Component) {
  _inherits(IconMenu, _React$Component);

  function IconMenu() {
    var _temp, _this, _ret;

    _classCallCheck(this, IconMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      anchorEl: null
    }, _this.handleClick = function (event) {
      _this.setState({ anchorEl: event.currentTarget });
    }, _this.handleClose = function () {
      _this.setState({ anchorEl: null });
    }, _this.handleOptionClick = function (option) {
      var onClick = option.onClick;


      if (onClick) {
        onClick();
      }

      _this.handleClose();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  IconMenu.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        options = _props.options,
        iconName = _props.iconName,
        iconStyle = _props.iconStyle,
        buttonStyle = _props.buttonStyle;
    var anchorEl = this.state.anchorEl;


    return React.createElement(
      'div',
      null,
      React.createElement(
        IconButton,
        {
          'aria-owns': anchorEl ? 'menu-list-grow' : null,
          'aria-haspopup': 'true',
          color: 'inherit',
          onClick: this.handleClick,
          style: buttonStyle
        },
        React.createElement(
          Icon,
          { color: 'inherit', style: iconStyle },
          iconName
        )
      ),
      React.createElement(
        Menu,
        {
          id: 'simple-menu',
          anchorEl: anchorEl,
          open: Boolean(anchorEl),
          onClose: this.handleClose
        },
        options.filter(function (o) {
          return !o.hidden;
        }).map(function (option, i) {
          return React.createElement(
            MenuItem,
            {
              key: i,
              onClick: function onClick() {
                return _this2.handleOptionClick(option);
              }
            },
            option.icon && React.createElement(
              ListItemIcon,
              null,
              option.icon
            ),
            option.icon && React.createElement(ListItemText, { inset: true, primary: option.text })
          );
        })
      )
    );
  };

  return IconMenu;
}(React.Component);

IconMenu.defaultProps = {
  option: [],
  iconName: 'more_vert'
};

export default IconMenu;