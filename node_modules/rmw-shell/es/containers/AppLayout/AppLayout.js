function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import 'react-toastify/dist/ReactToastify.css';
import Drawer from '../../containers/Drawer';
import React, { Component } from 'react';
import Routes from '../../containers/Routes';
import { ToastContainer } from 'react-toastify';
import { withStyles } from '@material-ui/core/styles';
import { checkForUpdate } from '../../utils/messaging';
import { injectIntl } from 'react-intl';

var styles = function styles(theme) {
  return {
    body: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: '100%',
      height: '100%'
    },
    root: {
      flexGrow: 1,
      zIndex: 1,
      overflow: 'hidden',
      position: 'relative',
      display: 'flex',
      width: '100%'
    }
  };
};

export var AppLayout = function (_Component) {
  _inherits(AppLayout, _Component);

  function AppLayout() {
    _classCallCheck(this, AppLayout);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  AppLayout.prototype.componentDidUpdate = function componentDidUpdate() {
    checkForUpdate();
  };

  AppLayout.prototype.render = function render() {
    var classes = this.props.classes;

    return React.createElement(
      'div',
      { className: classes.body },
      React.createElement(
        'div',
        { className: classes.root },
        React.createElement(Drawer, null),
        React.createElement(Routes, null),
        React.createElement(ToastContainer, null)
      )
    );
  };

  return AppLayout;
}(Component);

export default injectIntl(withStyles(styles, { withTheme: true })(AppLayout));