var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { List, ListItem } from 'material-ui';
import { makeSelectable } from 'material-ui/List';
import Subheader from 'material-ui/Subheader';
import Divider from 'material-ui/Divider';

function getNestedItems(hostItem, hostIndex) {
  if (hostItem.nestedItems !== undefined) {
    var items = hostItem.nestedItems.filter(function (item) {
      return item.visible !== false;
    });

    if (items.length > 0) {
      return items.map(function (item, i) {
        return getItem(item, hostIndex.toString() + i.toString());
      });
    }
  }

  return undefined;
};

function getItem(item, i) {
  delete item.visible;

  if (item !== undefined) {
    if (item.subheader !== undefined) {
      return React.createElement(
        Subheader,
        {
          key: i,
          inset: item.inset,
          style: item.style },
        item.subheader
      );
    } else if (item.divider !== undefined) {
      return React.createElement(Divider, {
        key: i,
        inset: item.inset,
        style: item.style
      });
    } else {
      return React.createElement(ListItem, _extends({}, item, {
        key: i,
        value: item.value,
        onMouseDown: function onMouseDown(e) {
          if (e.button === 1) {
            var win = window.open('' + item.value, '_blank');
            win.focus();
          }
        },
        nestedItems: getNestedItems(item, i)
      }));
    }
  }

  return undefined;
}

var SelectableMenuList = function (_Component) {
  _inherits(SelectableMenuList, _Component);

  function SelectableMenuList() {
    _classCallCheck(this, SelectableMenuList);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  SelectableMenuList.prototype.render = function render() {
    var _props = this.props,
        items = _props.items,
        onIndexChange = _props.onIndexChange,
        index = _props.index;


    var SelectableList = makeSelectable(List);

    return React.createElement(
      SelectableList,
      {
        value: index,
        onChange: onIndexChange },
      items.filter(function (item) {
        return item.visible !== false;
      }).map(function (item, i) {
        return getItem(item, i);
      })
    );
  };

  return SelectableMenuList;
}(Component);

;

SelectableMenuList.propTypes = process.env.NODE_ENV !== "production" ? {
  items: PropTypes.array.isRequired,
  onIndexChange: PropTypes.func.isRequired,
  index: PropTypes.string.isRequired
} : {};

export default SelectableMenuList;